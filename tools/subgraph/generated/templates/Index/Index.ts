// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends EthereumEvent {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SetLocator extends EthereumEvent {
  get params(): SetLocator__Params {
    return new SetLocator__Params(this);
  }
}

export class SetLocator__Params {
  _event: SetLocator;

  constructor(event: SetLocator) {
    this._event = event;
  }

  get identifier(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get score(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get locator(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class UnsetLocator extends EthereumEvent {
  get params(): UnsetLocator__Params {
    return new UnsetLocator__Params(this);
  }
}

export class UnsetLocator__Params {
  _event: UnsetLocator;

  constructor(event: UnsetLocator) {
    this._event = event;
  }

  get identifier(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Index__entriesResult {
  value0: Bytes;
  value1: BigInt;
  value2: Address;
  value3: Address;

  constructor(value0: Bytes, value1: BigInt, value2: Address, value3: Address) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromFixedBytes(this.value0));
    map.set("value1", EthereumValue.fromUnsignedBigInt(this.value1));
    map.set("value2", EthereumValue.fromAddress(this.value2));
    map.set("value3", EthereumValue.fromAddress(this.value3));
    return map;
  }
}

export class Index__getLocatorsResult {
  value0: Array<Bytes>;
  value1: Array<BigInt>;
  value2: Address;

  constructor(value0: Array<Bytes>, value1: Array<BigInt>, value2: Address) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromFixedBytesArray(this.value0));
    map.set("value1", EthereumValue.fromUnsignedBigIntArray(this.value1));
    map.set("value2", EthereumValue.fromAddress(this.value2));
    return map;
  }
}

export class Index extends SmartContract {
  static bind(address: Address): Index {
    return new Index("Index", address);
  }

  entries(param0: Address): Index__entriesResult {
    let result = super.call("entries", [EthereumValue.fromAddress(param0)]);

    return new Index__entriesResult(
      result[0].toBytes(),
      result[1].toBigInt(),
      result[2].toAddress(),
      result[3].toAddress()
    );
  }

  try_entries(param0: Address): CallResult<Index__entriesResult> {
    let result = super.tryCall("entries", [EthereumValue.fromAddress(param0)]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new Index__entriesResult(
        value[0].toBytes(),
        value[1].toBigInt(),
        value[2].toAddress(),
        value[3].toAddress()
      )
    );
  }

  isOwner(): boolean {
    let result = super.call("isOwner", []);

    return result[0].toBoolean();
  }

  try_isOwner(): CallResult<boolean> {
    let result = super.tryCall("isOwner", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  length(): BigInt {
    let result = super.call("length", []);

    return result[0].toBigInt();
  }

  try_length(): CallResult<BigInt> {
    let result = super.tryCall("length", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", []);

    return result[0].toAddress();
  }

  try_owner(): CallResult<Address> {
    let result = super.tryCall("owner", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  getScore(identifier: Address): BigInt {
    let result = super.call("getScore", [
      EthereumValue.fromAddress(identifier)
    ]);

    return result[0].toBigInt();
  }

  try_getScore(identifier: Address): CallResult<BigInt> {
    let result = super.tryCall("getScore", [
      EthereumValue.fromAddress(identifier)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getLocator(identifier: Address): Bytes {
    let result = super.call("getLocator", [
      EthereumValue.fromAddress(identifier)
    ]);

    return result[0].toBytes();
  }

  try_getLocator(identifier: Address): CallResult<Bytes> {
    let result = super.tryCall("getLocator", [
      EthereumValue.fromAddress(identifier)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  getLocators(cursor: Address, limit: BigInt): Index__getLocatorsResult {
    let result = super.call("getLocators", [
      EthereumValue.fromAddress(cursor),
      EthereumValue.fromUnsignedBigInt(limit)
    ]);

    return new Index__getLocatorsResult(
      result[0].toBytesArray(),
      result[1].toBigIntArray(),
      result[2].toAddress()
    );
  }

  try_getLocators(
    cursor: Address,
    limit: BigInt
  ): CallResult<Index__getLocatorsResult> {
    let result = super.tryCall("getLocators", [
      EthereumValue.fromAddress(cursor),
      EthereumValue.fromUnsignedBigInt(limit)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new Index__getLocatorsResult(
        value[0].toBytesArray(),
        value[1].toBigIntArray(),
        value[2].toAddress()
      )
    );
  }
}

export class ConstructorCall extends EthereumCall {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends EthereumCall {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends EthereumCall {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class SetLocatorCall extends EthereumCall {
  get inputs(): SetLocatorCall__Inputs {
    return new SetLocatorCall__Inputs(this);
  }

  get outputs(): SetLocatorCall__Outputs {
    return new SetLocatorCall__Outputs(this);
  }
}

export class SetLocatorCall__Inputs {
  _call: SetLocatorCall;

  constructor(call: SetLocatorCall) {
    this._call = call;
  }

  get identifier(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get score(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get locator(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class SetLocatorCall__Outputs {
  _call: SetLocatorCall;

  constructor(call: SetLocatorCall) {
    this._call = call;
  }
}

export class UnsetLocatorCall extends EthereumCall {
  get inputs(): UnsetLocatorCall__Inputs {
    return new UnsetLocatorCall__Inputs(this);
  }

  get outputs(): UnsetLocatorCall__Outputs {
    return new UnsetLocatorCall__Outputs(this);
  }
}

export class UnsetLocatorCall__Inputs {
  _call: UnsetLocatorCall;

  constructor(call: UnsetLocatorCall) {
    this._call = call;
  }

  get identifier(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UnsetLocatorCall__Outputs {
  _call: UnsetLocatorCall;

  constructor(call: UnsetLocatorCall) {
    this._call = call;
  }
}

export class UpdateLocatorCall extends EthereumCall {
  get inputs(): UpdateLocatorCall__Inputs {
    return new UpdateLocatorCall__Inputs(this);
  }

  get outputs(): UpdateLocatorCall__Outputs {
    return new UpdateLocatorCall__Outputs(this);
  }
}

export class UpdateLocatorCall__Inputs {
  _call: UpdateLocatorCall;

  constructor(call: UpdateLocatorCall) {
    this._call = call;
  }

  get identifier(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get score(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get locator(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class UpdateLocatorCall__Outputs {
  _call: UpdateLocatorCall;

  constructor(call: UpdateLocatorCall) {
    this._call = call;
  }
}
