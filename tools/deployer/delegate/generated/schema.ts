// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class DelegateContract extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save DelegateContract entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save DelegateContract entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("DelegateContract", id.toString(), this);
  }

  static load(id: string): DelegateContract | null {
    return store.get("DelegateContract", id) as DelegateContract | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get swapContract(): Bytes {
    let value = this.get("swapContract");
    return value.toBytes();
  }

  set swapContract(value: Bytes) {
    this.set("swapContract", Value.fromBytes(value));
  }

  get indexerContarct(): Bytes {
    let value = this.get("indexerContarct");
    return value.toBytes();
  }

  set indexerContarct(value: Bytes) {
    this.set("indexerContarct", Value.fromBytes(value));
  }

  get delegateContractOwner(): Bytes {
    let value = this.get("delegateContractOwner");
    return value.toBytes();
  }

  set delegateContractOwner(value: Bytes) {
    this.set("delegateContractOwner", Value.fromBytes(value));
  }

  get delegateTradeWallet(): Bytes {
    let value = this.get("delegateTradeWallet");
    return value.toBytes();
  }

  set delegateTradeWallet(value: Bytes) {
    this.set("delegateTradeWallet", Value.fromBytes(value));
  }
}

export class DelegateRule extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save DelegateRule entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save DelegateRule entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("DelegateRule", id.toString(), this);
  }

  static load(id: string): DelegateRule | null {
    return store.get("DelegateRule", id) as DelegateRule | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get signerToken(): Bytes {
    let value = this.get("signerToken");
    return value.toBytes();
  }

  set signerToken(value: Bytes) {
    this.set("signerToken", Value.fromBytes(value));
  }

  get senderToken(): Bytes {
    let value = this.get("senderToken");
    return value.toBytes();
  }

  set senderToken(value: Bytes) {
    this.set("senderToken", Value.fromBytes(value));
  }

  get maxSenderAmount(): BigInt {
    let value = this.get("maxSenderAmount");
    return value.toBigInt();
  }

  set maxSenderAmount(value: BigInt) {
    this.set("maxSenderAmount", Value.fromBigInt(value));
  }

  get priceCoef(): BigInt {
    let value = this.get("priceCoef");
    return value.toBigInt();
  }

  set priceCoef(value: BigInt) {
    this.set("priceCoef", Value.fromBigInt(value));
  }

  get priceExp(): BigInt {
    let value = this.get("priceExp");
    return value.toBigInt();
  }

  set priceExp(value: BigInt) {
    this.set("priceExp", Value.fromBigInt(value));
  }
}

export class ProvidedOrder extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ProvidedOrder entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ProvidedOrder entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ProvidedOrder", id.toString(), this);
  }

  static load(id: string): ProvidedOrder | null {
    return store.get("ProvidedOrder", id) as ProvidedOrder | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get tradeWallet(): Bytes {
    let value = this.get("tradeWallet");
    return value.toBytes();
  }

  set tradeWallet(value: Bytes) {
    this.set("tradeWallet", Value.fromBytes(value));
  }

  get signerToken(): Bytes {
    let value = this.get("signerToken");
    return value.toBytes();
  }

  set signerToken(value: Bytes) {
    this.set("signerToken", Value.fromBytes(value));
  }

  get senderToken(): Bytes {
    let value = this.get("senderToken");
    return value.toBytes();
  }

  set senderToken(value: Bytes) {
    this.set("senderToken", Value.fromBytes(value));
  }

  get senderAmount(): BigInt {
    let value = this.get("senderAmount");
    return value.toBigInt();
  }

  set senderAmount(value: BigInt) {
    this.set("senderAmount", Value.fromBigInt(value));
  }

  get priceCoef(): BigInt {
    let value = this.get("priceCoef");
    return value.toBigInt();
  }

  set priceCoef(value: BigInt) {
    this.set("priceCoef", Value.fromBigInt(value));
  }

  get priceExp(): BigInt {
    let value = this.get("priceExp");
    return value.toBigInt();
  }

  set priceExp(value: BigInt) {
    this.set("priceExp", Value.fromBigInt(value));
  }
}
